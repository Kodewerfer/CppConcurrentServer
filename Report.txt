My test result with my implementation of the client-side code indicates that:

When "asynchronous" remote commands were issued in rapid succession, the results come back 
interleaved. In the order that the commands were issued. For example, results of commands "q", "w", "e", "r" came back in that order, 
in two waves. My assumption was that since the server's response time, in this case, is almost fixed, and the file descriptors were 
created in a particular order, the printing of the response acquired from those descriptors will follow the order that the descriptors 
were created.

However, because it mainly depends on how much time it takes to have the response, if the server's response time is varied between each
request, the print result will be altered as well.

Moreover, when KeepAlive is being flagged. The results start to not only interleaved but also interfering with one another.  The result for 
one command may appear only once, or multiple times. But the number of results returned is consistent with the number of commands issued.

This can be primarily attributed to the technique I applied to implement the code. For the functionality "KeepAlive," I used one single int
type variable to store the lastest file descriptor. When a command was sent, the program will try to read the response from that particular 
descriptor. But it often came upon the case where the lastest response has not arrived, yet the response from the previous request is still 
present. In which case, the program will display that result more times than its requests were made.